{
  "desc": "",
  "c2s": false,
  "s2c": true,
  "args": [
    {
      "name": "moduleId",
      "desc": "",
      "type": "short"
    },
    {
      "name": "moduleValue",
      "desc": "",
      "type": "Dictionary<string, object>"
    }
  ],
  "functions": [
    "private void ReadAmbienceModule(BinaryReader reader)\n{\n    moduleValue.Clear();\n    moduleValue[\"playerId\"] = reader.ReadByte();\n    moduleValue[\"random\"] = reader.ReadInt32();\n    moduleValue[\"type\"] = reader.ReadByte();\n}",
    "private void WriteAmbienceModule(BinaryWriter writer)\n{\n    writer.Write((byte)moduleValue[\"playerId\"]);\n    writer.Write((int)moduleValue[\"random\"]);\n    writer.Write((byte)moduleValue[\"type\"]);\n}",
    "private void ReadBestiaryModule(BinaryReader reader)\n{\n    moduleValue.Clear();\n    var type = reader.ReadByte();\n    moduleValue[\"type\"] = type;\n    switch (type)\n    {\n        case 0:\n            moduleValue[\"npcId\"] = reader.ReadInt16();\n            moduleValue[\"killCount\"] = reader.ReadUInt16();\n            break;\n        case 1:\n            moduleValue[\"wasSeen\"] = reader.ReadInt16();\n            break;\n        case 2:\n            moduleValue[\"wasChatWith\"] = reader.ReadInt16();\n            break;\n    }\n}",
    "private void WriteBestiaryModule(BinaryWriter writer)\n{\n    var type = (byte)moduleValue[\"type\"];\n    writer.Write(type);\n    switch (type)\n    {\n        case 0:\n            writer.Write((short)moduleValue[\"npcId\"]);\n            writer.Write((ushort)moduleValue[\"killCount\"]);\n            break;\n        case 1:\n            writer.Write((short)moduleValue[\"wasSeen\"]);\n            break;\n        case 2:\n            writer.Write((short)moduleValue[\"wasChatWith\"]);\n            break;\n    }\n}",
    "private void ReadCreativePowerPermissionsModule(BinaryReader reader)\n{\n    moduleValue.Clear();\n    moduleValue[\"type\"] = reader.ReadByte();\n    moduleValue[\"powerId\"] = reader.ReadUInt16();\n    moduleValue[\"level\"] = reader.ReadByte();\n}",
    "private void WriteCreativePowerPermissionsModule(BinaryWriter writer)\n{\n    writer.Write((byte)moduleValue[\"type\"]);\n    writer.Write((ushort)moduleValue[\"powerId\"]);\n    writer.Write((byte)moduleValue[\"level\"]);\n}",
    "private void ReadLiquidModule(BinaryReader reader)\n{\n    var count = reader.ReadUInt16();\n    var changes = new List<Tuple<int, ushort, ushort>>(); \n    for (var i = 0; i < count; ++i)\n    {\n        var change = reader.ReadInt32();\n        var liquid = reader.ReadUInt16();\n        var liquidType = reader.ReadUInt16();\n        changes.Add(new Tuple<int, ushort, ushort>(change, liquid, liquidType));\n    }\n    moduleValue[\"changes\"] = changes;\n}",
    "private void WriteLiquidModule(BinaryWriter writer)\n{\n    var changes = (List<Tuple<int, ushort, ushort>>)moduleValue[\"changes\"];\n    writer.Write((ushort)changes.Count);\n    foreach (var change in changes)\n    {\n        writer.Write(change.Item1);\n        writer.Write(change.Item2);\n        writer.Write(change.Item3);\n    }\n}",
    "private void ReadParticlesModule(BinaryReader reader)\n{\n    moduleValue.Clear();\n    moduleValue[\"particleType\"] = reader.ReadByte();\n    moduleValue[\"positionInWorldX\"] = reader.ReadSingle();\n    moduleValue[\"positionInWorldY\"] = reader.ReadSingle();\n    moduleValue[\"movementVectorX\"] = reader.ReadSingle();\n    moduleValue[\"movementVectorY\"] = reader.ReadSingle();\n    moduleValue[\"packedShaderIndex\"] = reader.ReadInt32();\n    moduleValue[\"indexOfPlayerWhoInvokedThis\"] = reader.ReadByte();\n}",
    "private void WriteParticlesModule(BinaryWriter writer)\n{\n    writer.Write((byte)moduleValue[\"particleType\"]);\n    writer.Write((float)moduleValue[\"positionInWorldX\"]);\n    writer.Write((float)moduleValue[\"positionInWorldY\"]);\n    writer.Write((float)moduleValue[\"movementVectorX\"]);\n    writer.Write((float)moduleValue[\"movementVectorY\"]);\n    writer.Write((int)moduleValue[\"packedShaderIndex\"]);\n    writer.Write((byte)moduleValue[\"indexOfPlayerWhoInvokedThis\"]);\n}",
    "private void ReadPingModule(BinaryReader reader)\n{\n    moduleValue.Clear();\n    moduleValue[\"positionX\"] = reader.ReadSingle();\n    moduleValue[\"positionY\"] = reader.ReadSingle();\n}",
    "private void WritePingModule(BinaryWriter writer)\n{\n    writer.Write((float)moduleValue[\"positionX\"]);\n    writer.Write((float)moduleValue[\"positionY\"]);\n}",
    "private void ReadTeleportPylonModule(BinaryReader reader)\n{\n    moduleValue.Clear();\n    moduleValue[\"packetType\"] = reader.ReadByte();\n    moduleValue[\"positionInTilesX\"] = reader.ReadInt16();\n    moduleValue[\"positionInTilesY\"] = reader.ReadInt16();\n    moduleValue[\"typeOfPylon\"] = reader.ReadByte();\n}",
    "private void WriteTeleportPylonModule(BinaryWriter writer)\n{\n    writer.Write((byte)moduleValue[\"packetType\"]);\n    writer.Write((short)moduleValue[\"positionInTilesX\"]);\n    writer.Write((short)moduleValue[\"positionInTilesY\"]);\n    writer.Write((byte)moduleValue[\"typeOfPylon\"]);\n}",
    "private void ReadTextModule(BinaryReader reader)\n{\n    moduleValue.Clear();\n    if (Side == Side.Server)\n    {\n        moduleValue[\"authorId\"] = reader.ReadByte();\n        var text = new NetworkText();\n        text.OnDeserialize(reader);\n        moduleValue[\"text\"] = text;\n        var color = new Color();\n        color.OnDeserialize(reader);\n        moduleValue[\"color\"] = color;\n    }\n    else if (Side == Side.Client)\n    {\n        var cmdId = reader.ReadString();\n        moduleValue[\"cmdId\"] = cmdId;\n        var text = reader.ReadString();\n        moduleValue[\"text\"] = text;\n    }\n}",
    "private void WriteTextModule(BinaryWriter writer)\n{\n    if (Side == Side.Server)\n    {\n        writer.Write((byte)moduleValue[\"authorId\"]);\n        ((NetworkText)moduleValue[\"text\"]).OnSerialize(writer);\n        ((Color)moduleValue[\"color\"]).OnSerialize(writer);\n    }\n    else if (Side == Side.Client)\n    {\n        writer.Write((string)moduleValue[\"cmdId\"]);\n        writer.Write((string)moduleValue[\"text\"]);\n    }\n}"
  ],
  "serialization": "writer.Write(moduleId);\nswitch (moduleId)\n{\n    case 0:\n        WriteLiquidModule(writer);\n        break;\n    case 1:\n        WriteTextModule(writer);\n        break;\n    case 2:\n        WritePingModule(writer);\n        break;\n    case 3:\n        WriteAmbienceModule(writer);\n        break;\n    case 4:\n        WriteBestiaryModule(writer);\n        break;\n    case 5:\n    case 6:\n    case 7:\n        throw new NotImplementedException();\n    case 8:\n        WriteTeleportPylonModule(writer);\n        break;\n    case 9:\n        WriteParticlesModule(writer);\n        break;\n    case 10:\n        throw new NotImplementedException();\n}",
  "deserialization": "moduleId = reader.ReadInt16();\nswitch (moduleId)\n{\n    case 0:\n        ReadLiquidModule(reader);\n        break;\n    case 1:\n        ReadTextModule(reader);\n        break;\n    case 2:\n        ReadPingModule(reader);\n        break;\n    case 3:\n        ReadAmbienceModule(reader);\n        break;\n    case 4:\n        ReadBestiaryModule(reader);\n        break;\n    case 5:\n    case 6:\n    case 7:\n        throw new NotImplementedException();\n    case 8:\n        ReadTeleportPylonModule(reader);\n        break;\n    case 9:\n        ReadParticlesModule(reader);\n        break;\n    case 10:\n        throw new NotImplementedException();\n}"
}